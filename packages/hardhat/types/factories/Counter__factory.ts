/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "counter",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "CounterError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "oldValue",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "int256",
        name: "newValue",
        type: "int256",
      },
    ],
    name: "Decrement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "oldValue",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "int256",
        name: "newValue",
        type: "int256",
      },
    ],
    name: "Increment",
    type: "event",
  },
  {
    inputs: [],
    name: "decrement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "get",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "counter",
        type: "int256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "throwError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103f73803806103f783398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b6103988061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636d4ce63c116100505780636d4ce63c1461007e578063d09de08a14610093578063e5c19b2d1461009b57600080fd5b80632baeceb71461006c5780632f7643a814610076575b600080fd5b6100746100ae565b005b610074610136565b60005460405190815260200160405180910390f35b610074610183565b6100746100a9366004610287565b600055565b6100ec6040518060400160405280601681526020017f436f756e7465722064656372656d656e7465642e2e2e0000000000000000000081525061020b565b60008054908190806100fd836102b6565b9091555050600080546040519091829184917ffc45a310c967c8844bd47396d20e9a8046e098fcd42d9262cd9da97a0c1d732291a35050565b604051631024196b60e11b815260206004820152601760248201527f536f6d657468696e672077656e742077726f6e672e2e2e000000000000000000604482015260640160405180910390fd5b6101c16040518060400160405280601681526020017f436f756e74657220696e6372656d656e7465642e2e2e0000000000000000000081525061020b565b60008054908190806101d2836102d4565b9091555050600080546040519091829184917fa3eb825ecdd5d63bbd00de573531f11c8cc4c0f8d8517df491618c66ddb3cd7f91a35050565b6102638160405160240161021f919061030d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663104c13eb60e21b179052610266565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60006020828403121561029957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8214156102cc576102cc6102a0565b506000190190565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610306576103066102a0565b5060010190565b600060208083528351808285015260005b8181101561033a5785810183015185820160400152820161031e565b8181111561034c576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212207f15bc1941621539c84c11eb953f4eb0d7c8a697cf2eaecb12793c77fb8139c864736f6c634300080b0033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(counter, overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(counter, overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
