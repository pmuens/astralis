/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MessageStruct = {
  id: BigNumberish;
  body: string;
  owner: string;
  createdAt: BigNumberish;
  updatedAt: BigNumberish;
  isEntity: boolean;
};

export type MessageStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  id: BigNumber;
  body: string;
  owner: string;
  createdAt: BigNumber;
  updatedAt: BigNumber;
  isEntity: boolean;
};

export interface MessagesInterface extends utils.Interface {
  functions: {
    "createMessage(string)": FunctionFragment;
    "getMessage(uint256)": FunctionFragment;
    "nextId()": FunctionFragment;
    "removeMessage(uint256)": FunctionFragment;
    "updateMessage(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMessage",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMessage",
    data: BytesLike
  ): Result;

  events: {
    "CreateMessage(uint256,address,string,uint256)": EventFragment;
    "RemoveMessage(uint256,address,string,uint256)": EventFragment;
    "UpdateMessage(uint256,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMessage"): EventFragment;
}

export type CreateMessageEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { id: BigNumber; owner: string; body: string; createdAt: BigNumber }
>;

export type CreateMessageEventFilter = TypedEventFilter<CreateMessageEvent>;

export type RemoveMessageEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { id: BigNumber; owner: string; body: string; removedAt: BigNumber }
>;

export type RemoveMessageEventFilter = TypedEventFilter<RemoveMessageEvent>;

export type UpdateMessageEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { id: BigNumber; owner: string; body: string; updatedAt: BigNumber }
>;

export type UpdateMessageEventFilter = TypedEventFilter<UpdateMessageEvent>;

export interface Messages extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessagesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMessage(
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMessage(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MessageStructOutput]>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeMessage(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMessage(
      id: BigNumberish,
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createMessage(
    body: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMessage(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MessageStructOutput>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  removeMessage(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMessage(
    id: BigNumberish,
    body: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createMessage(body: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMessage(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MessageStructOutput>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    removeMessage(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMessage(
      id: BigNumberish,
      body: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreateMessage(uint256,address,string,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      createdAt?: null
    ): CreateMessageEventFilter;
    CreateMessage(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      createdAt?: null
    ): CreateMessageEventFilter;

    "RemoveMessage(uint256,address,string,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      removedAt?: null
    ): RemoveMessageEventFilter;
    RemoveMessage(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      removedAt?: null
    ): RemoveMessageEventFilter;

    "UpdateMessage(uint256,address,string,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      updatedAt?: null
    ): UpdateMessageEventFilter;
    UpdateMessage(
      id?: BigNumberish | null,
      owner?: string | null,
      body?: null,
      updatedAt?: null
    ): UpdateMessageEventFilter;
  };

  estimateGas: {
    createMessage(
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMessage(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    removeMessage(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMessage(
      id: BigNumberish,
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMessage(
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMessage(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMessage(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMessage(
      id: BigNumberish,
      body: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
